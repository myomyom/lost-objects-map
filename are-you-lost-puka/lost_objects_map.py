# -*- coding: utf-8 -*-
"""lost-objects-map.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/184E7hSKoiYVhuR1is20nRh8230mS86lA
"""

import pandas as pd
import folium
from folium.plugins import MarkerCluster
import json
import urllib.request
from pandas import json_normalize
import datetime

def fetch_and_append_data(offset, dfGares):
    url = f"https://ressources.data.sncf.com/api/explore/v2.1/catalog/datasets/gares-de-voyageurs/records?select=nom%2C%20codes_uic%2C%20codeinsee%2C%20position_geographique&order_by=codeinsee%20asc&limit=100&offset={offset}"
    try:
        with urllib.request.urlopen(url) as response:
            data = json.loads(response.read())

            if 'results' in data and data['results']:
                dfGares = pd.concat([dfGares, json_normalize(data['results'])], ignore_index=True)
            else:
              return dfGares
    except urllib.error.URLError as e:
        print(f"Error fetching data for offset {offset}: {e}")
    return dfGares

dfGares = pd.DataFrame()

# Fetch total_count before the loop
url_total_count = "https://ressources.data.sncf.com/api/explore/v2.1/catalog/datasets/gares-de-voyageurs/records?select=nom%2C%20codes_uic%2C%20codeinsee%2C%20position_geographique&order_by=codeinsee%20asc&limit=1"
with urllib.request.urlopen(url_total_count) as response:
    data_total_count = json.loads(response.read())
    total_count = data_total_count['total_count']

offset = 0
while offset < total_count:
  dfGares = fetch_and_append_data(offset, dfGares)
  offset += 100

dfGares = dfGares.drop('position_geographique', axis=1)
dfGares = dfGares.rename(columns={'nom' : 'Gare', 'codes_uic' : 'UIC', 'codeinsee' : 'Code INSEE', 'position_geographique.lon' : 'Longitude', 'position_geographique.lat' : 'Latitude'})
dfGares['UIC'] = dfGares['UIC'].astype(str).str.zfill(10)

def fetch_and_append_data(offset, total_count, dfObjets):
    dateNow = datetime.datetime.now()
    year = str(dateNow.strftime("%Y"))
    month = str(dateNow.strftime("%m"))
    date = str(dateNow.strftime("%d"))

    today = year + "-" + month + "-" + date
    today = urllib.parse.quote(today, safe='')

    url = f"https://ressources.data.sncf.com/api/explore/v2.1/catalog/datasets/objets-trouves-gares/records?limit=100&offset={offset}&refine=date%3A{today}"
    try:
        with urllib.request.urlopen(url) as response:
            data = json.loads(response.read())
            if 'total_count' in data and data['total_count']:
              total_count = data['total_count']

            if 'results' in data and data['results']:
                dfObjets = pd.concat([dfObjets, json_normalize(data['results'])], ignore_index=True)
            else:
              return (dfObjets, total_count)
    except urllib.error.URLError as e:
        print(f"Error fetching data for offset {offset}: {e}")
    return (dfObjets, total_count)

dfObjets = pd.DataFrame()
offset = 0
total_count = 0
while True:
  dfObjets, total_count = fetch_and_append_data(offset, total_count, dfObjets)
  if len(dfObjets) >= total_count:
      break
  offset += 100

# Select and rename columns after fetching all data
dfObjets = dfObjets[['date', 'gc_obo_nature_c', 'gc_obo_gare_origine_r_code_uic_c']]
dfObjets = dfObjets.rename(columns={'gc_obo_nature_c' : 'Objet', 'date': 'Date', 'gc_obo_gare_origine_r_code_uic_c':'UIC'})

dateNow = datetime.datetime.now()
year = str(dateNow.strftime("%y"))
month = str(dateNow.strftime("%m"))
today = str(dateNow.strftime("%d"))

print(dateNow)
print(year + "-" + month + "-" + today)

#Merge dfObjets and dfGares
dfBoth = pd.merge(dfObjets, dfGares, on='UIC')

#Counting total number of objects in each gare (first view)

dfBoth['Count'] = dfBoth.groupby(['Gare', 'Objet'])['Date'].transform('count')

dfObjetsInGare = dfBoth[['UIC', 'Gare', 'Objet', 'Count', 'Latitude', 'Longitude']].drop_duplicates()

# Group the DataFrame by the 'Gare' column and calculate the sum of the 'Count' for each Gare.
mapObjetsInGare = dfObjetsInGare.groupby('Gare')['Count'].sum()

dfObjetsSpecificGare = dfBoth[['UIC', 'Objet', 'Count']].drop_duplicates()
#display(dfObjetsSpecificGare)
def makeList(station):
  listeObjets = pd.DataFrame()
  for i, gare in dfObjetsSpecificGare.iterrows():
    if gare['UIC'] == station:
      x = pd.DataFrame({
        'Objet': gare['Objet'],
        'Count': gare['Count']
      }, index=[0])
      listeObjets = pd.concat([listeObjets, x])
    else:
      continue
  listeObjets.sort_values(by=['Count'], ascending=False, inplace=True)
  return listeObjets

def fullList(station):
  liste = makeList(station)
  return(liste.to_html(classes="table table-striped table-hover table-responsive", index=False, justify='left'))

"""Map"""
mapGare = folium.Map(location=[dfObjetsInGare.Latitude.mean(), dfObjetsInGare.Longitude.mean()], tiles="Cartodb Positron", zoom_start=6, control_scale=True)
mapGare._name = "map_gare"
mapGare._id = '123'
print(mapGare.get_name())

marker_cluster = MarkerCluster(
    name='1000 clustered icons',
    overlay=True,
    control=False,
    icon_create_function=None
)

for index, location_info in dfObjetsInGare.iterrows():
  gare = 'style="text-align:center; font-weight: bold;">SNCF ' + str(location_info['Gare'])
  url = "https://lost-objects-map.onrender.com/gare/" + str(location_info['UIC'])
  
  #TODO: fix url_for problem & replace the string
  
  html = '<div style="position:relative; width: 500px; min-height:200px; max-height:1000px;"><h3 '+gare + '''</h3><iframe
  id="inlineFrameExample"
  title="Inline Frame Example"
  style="position: absolute; width:100%;height:90%;padding: 5px;"
  src="''' + url + '''">
  </iframe></div>'''
  
  tt = '<h4 '+gare + '</h4><h5 style=\"text-align:center\">Objets trouv√©s: ' + str(location_info['Count']) + '</h5>'
  marker = folium.Marker([location_info["Latitude"], location_info["Longitude"]],
                tooltip='<div style=\"margin:0px 1px\">{}</div>'.format(tt),
                popup=folium.Popup(html, lazy=True),
                parse_html=True)
  marker_cluster.add_child(marker)

marker_cluster.add_to(mapGare)

mapGare.save("./templates/output.html")